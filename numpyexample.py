import numpy as np

def main():
    mylist = [1,2,3]
    print('type of mylist = [1,2,3]', type(mylist))
    myarr = np.array(mylist)
    print('np.array(mylist)', myarr)
    type(myarr)
    mymatrix = [[1,2,3],[4,5,6],[7,8,9]]
    print('mymatrix', mymatrix)
    print('np.arrary(mymatrix)', '\n', np.array(mymatrix))
    print('Like RANGE', np.arange(0,10))
    print('You can add a step', np.arange(0,101,20))
    print('Vectors, rows first then columns\n', np.zeros((2, 5)))
    print('Vector of ones', np.ones((5)))
    print('Evenly spaced numbers over a specified interval', np.linspace(0,100,5))
    print('Identity Matrix\n', np.eye(5))
    print('Random\n', np.random.rand(5,2))
    print('Mean is at 0 vaiance is 1\n', np.random.randn(10))
    print('Random integers\n', np.random.randint(0,101,10))
    print('Random integers\n', np.random.randint(0,101,(4,5)))
    print('Using a seed') 
    np.random.seed(42)
    print(np.random.rand(4))
    print(np.random.rand(4))
    np.random.seed(42)
    print(np.random.rand(4))
    arr = np.arange(0,25)
    print('An array\n', arr)
    print('Array reshaped\n', arr.reshape(5,5))
    rdanints =  np.random.randint(0,101,10)
    print(rdanints)
    print('arr[8]',arr[8])
    print('arr[1:5]', arr[1:5])
    print('arr[:5]', arr[:5])
    print('arr[5:]', arr[5:])
    slice_of_arr = arr[0:5]
    print('slice_of_arr = arr[0:5]', slice_of_arr)
    print('slice_of_arr[:] = 99: ')
    slice_of_arr[:] = 99
    print(slice_of_arr)
    arr_2d = np.array([[5,10,15],[20,25,30],[35,40,45]])
    print(arr_2d)
    print('arr_2d.shape', arr_2d.shape)
    print('arr_2d[2]', arr_2d[2])
    print('arr_2d[:2,1:]\n', arr_2d[:2,1:])
    print('Conditional - arr = np.arange(1,11)')
    arr = np.arange(1,11)
    print(arr)
    print('Return arr > 4', arr > 4  )
    print('arr[bool_arr]', arr[arr > 4])
    print('arr = np.arrange(0,10)')
    arr = np.arange(0,10)
    print(arr)
    print('add 5 to the array', arr + 5)
    print('Add (can do */-) arr to arr', arr + arr)
    # OTHER FUNCTIONS
    print('arr.sum()', arr.sum())
    print('arr.mean()', arr.mean())
    print('arr.max()', arr.max())
    print('arr.var()', arr.var())
    print('arr.std()', arr.std())
    # MULTI-DIMENSIONAL
    print('Range 0-25', arr := np.arange(0,25))
    print('Reshape ', arr := arr.reshape(5,5))
    print('Sum', arr.sum())
    print('Max', arr.max())
    print('Var', arr.var())
    print('Std', arr.std())
    print('Arrange.reshape\n', arr2d := np.arange(0,25).reshape(5,5))
    print('arr2d.shape\n', arr2d.shape)
    print('arr2d.sum()\n', arr2d.sum())
    print('arr2d.sum(axis=0) - ROWS \n', arr2d.sum(axis=0))
    print('arr2d.sum(axis=1) - COLUMNS\n', arr2d.sum(axis=1))
    # BROADCASTING
    bcast1 = arr[0:5] = 100
    print('Broadcasting - setting a value with index range, arr[0:5]=100\n', bcast1) 
    print('Reset array, we will see why in a moment arr = np.arange(0,11)')
    arr = np.arange(0,11)
    print(arr)
    print('Important otes on Slices = slice_of_arr = arr[0:6]')
    slice_of_arr = arr[0:6]
    print(slice_of_arr)
    print('Change of slice slice_of_arr[:]=99')
    slice_of_arr[:]=99
    print(slice_of_arr)
    print('Changes also occur in our original array, Data is not copied, you view original which saves memory problems, arr')
    print(arr)
    print('Conditional Selection arr = np.arange(1,11), arr')
    arr =np.arange(1, 11)
    print(arr)
    print('arr > 4', arr>4)
    print('bool_arr = arr>4', bool_arr := arr>4)
    print('bool_arr', bool_arr)
    
if __name__ == "__main__":
    main()