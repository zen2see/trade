"""
Annotated guide for mypandas.py (keeps original file unchanged).

This file is a structured, concise annotation of the major sections in
/home/ysl/YSLDEV/PYTHON/TRADE/mypandas.py so you can read explanations
without editing the original script.

Use this as a companion; it points out common bugs and minimal fixes.
"""

# ---- Header / Imports -----------------------------------------------------
# Lines near top of mypandas.py
# - tkinter.ALL is imported but unused; safe to remove to avoid lint warnings.
# - Required imports: numpy as np, pandas as pd, matplotlib.pyplot as plt,
#   sqlalchemy.create_engine, matplotlib.gridspec, ticker.
# Explanation: these provide array ops, DataFrame ops, plotting, and an in-memory SQL demo.

# ---- Large doc / example blocks -------------------------------------------
# Many examples are inside triple-quoted strings or plain comments.
# Important: code inside triple quotes is NOT executed. If you expect variables
# (e.g., Z) to exist at runtime, ensure their definitions are not inside triple quotes.

# ---- NumPy demonstrations -------------------------------------------------
# Purpose: show array creation, reshape, indexing, broadcasting.
# Typical patterns: np.linspace, np.arange, np.random.seed, arr.reshape.
# Note: these are examples, not part of any pipeline.

# ---- Pandas demos & IO ---------------------------------------------------
# Reads tips.csv and other CSVs; demonstrates:
# - df.head(), info(), describe()
# - creating new columns (tip_pct, price_per_person)
# - apply, np.vectorize, merging, value_counts
# Tip: drop(..., inplace=True) modifies dataframe in place.

# ---- SQL example ---------------------------------------------------------
# Uses create_engine('sqlite:///:memory:') and df.to_sql / pd.read_sql to demo
# simple SQL I/O. Useful pattern for quick persistence/prototyping.

# ---- Matplotlib examples (many) ------------------------------------------
# Multiple styles shown: functional plt.* and OOP fig/ax.
# Common patterns:
#  - fig, ax = plt.subplots(); ax.plot(...); ax.set_xlabel(...)
#  - plt.show() required when running as script
#  - use plt.tight_layout() or fig.tight_layout() to avoid label overlap
#  - ax.text(..., transform=ax.transAxes) to position text relative to axes

# Common gotchas found in the file:
# 1) Typo variable names: phi_ex vs phi_ext, x vs xx â€” leads to NameError.
# 2) Case-sensitive colormap: use plt.cm.RdBu (not rDbu).
# 3) vmin/vmax must be scalars; for symmetric diverging colormap do:
#       vmax = np.abs(Z).max(); vmin = -vmax
# 4) extent for imshow should be (xmin, xmax, ymin, ymax). If you scale axes,
#    ensure ordering matches the image orientation.
# 5) Code inside triple-quoted blocks won't run; move needed code outside.

# ---- Colormap / flux-qubit block (practical example) ----------------------
# Purpose: compute 2D potential and visualize with pcolor / imshow.
# Minimum correct sequence (extract and run in order):
#   alpha = 0.7
#   phi_ext = 2*np.pi*0.5
#   def flux_qubit_potential(phi_m, phi_p):
#       return 2 + alpha - 2*np.cos(phi_p)*np.cos(phi_m) - alpha*np.cos(phi_ext)
#   phi_m = np.linspace(0, 2*np.pi, 100)
#   phi_p = np.linspace(0, 2*np.pi, 100)
#   X, Y = np.meshgrid(phi_p, phi_m)
#   Z = flux_qubit_potential(X, Y).T
#   vmax = np.abs(Z).max()
#   p = ax.pcolormesh(X/(2*np.pi), Y/(2*np.pi), Z, cmap=plt.cm.RdBu,
#                     vmin=-vmax, vmax=vmax, shading='auto')
#   fig.colorbar(p, ax=ax)
#
# If you see "NameError: Z is not defined":
# - ensure the above computation of Z is executed (not inside """ comments)
# - ensure flux_qubit_potential is defined (no typos in phi_ext name)

# ---- Correct imshow usage (concise) -------------------------------------
# Example:
#   fig, ax = plt.subplots()
#   vmax = np.abs(Z).max()
#   im = ax.imshow(Z, cmap=plt.cm.RdBu, vmin=-vmax, vmax=vmax,
#                  origin='lower',
#                  extent=(X.min()/(2*np.pi), X.max()/(2*np.pi),
#                          Y.min()/(2*np.pi), Y.max()/(2*np.pi)),
#                  interpolation='bilinear')
#   fig.colorbar(im, ax=ax)
#   ax.set_xlabel(r'$\phi_p / 2\pi$')
#   ax.set_ylabel(r'$\phi_m / 2\pi$')
#   plt.show()

# ---- Quick fixes to apply in mypandas.py ---------------------------------
# - Remove stray triple quotes around code you want to run (or move the code out).
# - Fix typos: phi_ex -> phi_ext, rDbu -> RdBu, x -> xx where appropriate.
# - Use vmax/vmin pattern to enforce symmetric colormap.

# ---- How to use this annotation file -------------------------------------
# - open mypandas.py next to this file in VS Code.
# - follow the "Colormap" snippet to debug the Z/imshow section.
# - if you want, I can produce a patched version of just the broken blocks
#   (pcolormesh/imshow/text placement) as a small patch you can paste in.

# End of annotations.
# (This file intentionally contains only concise explanations and code-snippets;
#  it does not execute the original mypandas.py or modify it.)